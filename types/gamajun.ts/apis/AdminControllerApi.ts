/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Admin,
} from '../models';
import {
    AdminFromJSON,
    AdminToJSON,
} from '../models';

export interface CreatAdminRequest {
    admin: Admin;
}

export interface DeleteAdminRequest {
    username: string;
}

export interface GetAdminRequest {
    username: string;
}

/**
 * 
 */
export class AdminControllerApi extends runtime.BaseAPI {

    /**
     */
    async allAdminsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Admin>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdminFromJSON));
    }

    /**
     */
    async allAdmins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Admin>> {
        const response = await this.allAdminsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async creatAdminRaw(requestParameters: CreatAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Admin>> {
        if (requestParameters.admin === null || requestParameters.admin === undefined) {
            throw new runtime.RequiredError('admin','Required parameter requestParameters.admin was null or undefined when calling creatAdmin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminToJSON(requestParameters.admin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminFromJSON(jsonValue));
    }

    /**
     */
    async creatAdmin(requestParameters: CreatAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Admin> {
        const response = await this.creatAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAdminRaw(requestParameters: DeleteAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling deleteAdmin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admins/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAdmin(requestParameters: DeleteAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAdminRaw(requestParameters: GetAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Admin>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getAdmin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admins/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminFromJSON(jsonValue));
    }

    /**
     */
    async getAdmin(requestParameters: GetAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Admin> {
        const response = await this.getAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
