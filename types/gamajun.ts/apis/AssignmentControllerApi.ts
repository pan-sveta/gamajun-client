/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Assignment,
} from '../models';
import {
    AssignmentFromJSON,
    AssignmentToJSON,
} from '../models';

export interface CreatAssignmentRequest {
    assignment: Assignment;
}

export interface DeleteAssignmentRequest {
    assignmentId: string;
}

export interface GetAssignmentRequest {
    assignmentId: string;
}

export interface UpdateAssignmentRequest {
    assignmentId: string;
    assignment: Assignment;
}

/**
 * 
 */
export class AssignmentControllerApi extends runtime.BaseAPI {

    /**
     */
    async allAssignmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Assignment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assignments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssignmentFromJSON));
    }

    /**
     */
    async allAssignments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Assignment>> {
        const response = await this.allAssignmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async creatAssignmentRaw(requestParameters: CreatAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters.assignment === null || requestParameters.assignment === undefined) {
            throw new runtime.RequiredError('assignment','Required parameter requestParameters.assignment was null or undefined when calling creatAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/assignments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentToJSON(requestParameters.assignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     */
    async creatAssignment(requestParameters: CreatAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.creatAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAssignmentRaw(requestParameters: DeleteAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assignmentId === null || requestParameters.assignmentId === undefined) {
            throw new runtime.RequiredError('assignmentId','Required parameter requestParameters.assignmentId was null or undefined when calling deleteAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assignments/{assignmentId}`.replace(`{${"assignmentId"}}`, encodeURIComponent(String(requestParameters.assignmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAssignment(requestParameters: DeleteAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssignmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAssignmentRaw(requestParameters: GetAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters.assignmentId === null || requestParameters.assignmentId === undefined) {
            throw new runtime.RequiredError('assignmentId','Required parameter requestParameters.assignmentId was null or undefined when calling getAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assignments/{assignmentId}`.replace(`{${"assignmentId"}}`, encodeURIComponent(String(requestParameters.assignmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     */
    async getAssignment(requestParameters: GetAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.getAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAssignmentRaw(requestParameters: UpdateAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assignment>> {
        if (requestParameters.assignmentId === null || requestParameters.assignmentId === undefined) {
            throw new runtime.RequiredError('assignmentId','Required parameter requestParameters.assignmentId was null or undefined when calling updateAssignment.');
        }

        if (requestParameters.assignment === null || requestParameters.assignment === undefined) {
            throw new runtime.RequiredError('assignment','Required parameter requestParameters.assignment was null or undefined when calling updateAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/assignments/{assignmentId}`.replace(`{${"assignmentId"}}`, encodeURIComponent(String(requestParameters.assignmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentToJSON(requestParameters.assignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentFromJSON(jsonValue));
    }

    /**
     */
    async updateAssignment(requestParameters: UpdateAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assignment> {
        const response = await this.updateAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
