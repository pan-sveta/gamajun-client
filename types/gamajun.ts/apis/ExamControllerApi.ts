/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {Exam, ExamSubmission,} from '../models';
import {ExamFromJSON, ExamSubmissionFromJSON, ExamToJSON,} from '../models';

export interface BeginExamRequest {
    examId: string;
}

export interface CreatExamRequest {
    exam: Exam;
}

export interface DeleteExamRequest {
    examId: string;
}

export interface GetExamRequest {
    examId: string;
}

export interface UpdateExamRequest {
    examId: string;
    exam: Exam;
}

/**
 * 
 */
export class ExamControllerApi extends runtime.BaseAPI {

    /**
     */
    async allExamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Exam>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExamFromJSON));
    }

    /**
     */
    async allExams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Exam>> {
        const response = await this.allExamsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async beginExamRaw(requestParameters: BeginExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExamSubmission>> {
        if (requestParameters.examId === null || requestParameters.examId === undefined) {
            throw new runtime.RequiredError('examId','Required parameter requestParameters.examId was null or undefined when calling beginExam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exams/{examId}/submission`.replace(`{${"examId"}}`, encodeURIComponent(String(requestParameters.examId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExamSubmissionFromJSON(jsonValue));
    }

    /**
     */
    async beginExam(requestParameters: BeginExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExamSubmission> {
        const response = await this.beginExamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async creatExamRaw(requestParameters: CreatExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exam>> {
        if (requestParameters.exam === null || requestParameters.exam === undefined) {
            throw new runtime.RequiredError('exam','Required parameter requestParameters.exam was null or undefined when calling creatExam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExamToJSON(requestParameters.exam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExamFromJSON(jsonValue));
    }

    /**
     */
    async creatExam(requestParameters: CreatExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exam> {
        const response = await this.creatExamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteExamRaw(requestParameters: DeleteExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.examId === null || requestParameters.examId === undefined) {
            throw new runtime.RequiredError('examId','Required parameter requestParameters.examId was null or undefined when calling deleteExam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exams/{examId}`.replace(`{${"examId"}}`, encodeURIComponent(String(requestParameters.examId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteExam(requestParameters: DeleteExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExamRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getExamRaw(requestParameters: GetExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exam>> {
        if (requestParameters.examId === null || requestParameters.examId === undefined) {
            throw new runtime.RequiredError('examId','Required parameter requestParameters.examId was null or undefined when calling getExam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exams/{examId}`.replace(`{${"examId"}}`, encodeURIComponent(String(requestParameters.examId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExamFromJSON(jsonValue));
    }

    /**
     */
    async getExam(requestParameters: GetExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exam> {
        const response = await this.getExamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async openedExamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Exam>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exams/opened`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExamFromJSON));
    }

    /**
     */
    async openedExams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Exam>> {
        const response = await this.openedExamsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateExamRaw(requestParameters: UpdateExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Exam>> {
        if (requestParameters.examId === null || requestParameters.examId === undefined) {
            throw new runtime.RequiredError('examId','Required parameter requestParameters.examId was null or undefined when calling updateExam.');
        }

        if (requestParameters.exam === null || requestParameters.exam === undefined) {
            throw new runtime.RequiredError('exam','Required parameter requestParameters.exam was null or undefined when calling updateExam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exams/{examId}`.replace(`{${"examId"}}`, encodeURIComponent(String(requestParameters.examId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExamToJSON(requestParameters.exam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExamFromJSON(jsonValue));
    }

    /**
     */
    async updateExam(requestParameters: UpdateExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Exam> {
        const response = await this.updateExamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
