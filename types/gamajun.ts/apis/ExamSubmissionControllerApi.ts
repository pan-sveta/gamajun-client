/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExamSubmission,
  ExamSubmissionCheckpointCommand,
  ExamSubmissionSubmitCommand,
  StudentExamSubmissionDTO,
} from '../models';
import {
    ExamSubmissionFromJSON,
    ExamSubmissionToJSON,
    ExamSubmissionCheckpointCommandFromJSON,
    ExamSubmissionCheckpointCommandToJSON,
    ExamSubmissionSubmitCommandFromJSON,
    ExamSubmissionSubmitCommandToJSON,
    StudentExamSubmissionDTOFromJSON,
    StudentExamSubmissionDTOToJSON,
} from '../models';

export interface CheckpointExamSubmissionsRequest {
    examSubmissionId: string;
    examSubmissionCheckpointCommand: ExamSubmissionCheckpointCommand;
}

export interface DeleteExamSubmissionsRequest {
    examSubmissionId: string;
}

export interface GetExamSubmissionsRequest {
    examSubmissionId: string;
}

export interface SubmitExamSubmissionsRequest {
    examSubmissionId: string;
    examSubmissionSubmitCommand: ExamSubmissionSubmitCommand;
}

/**
 * 
 */
export class ExamSubmissionControllerApi extends runtime.BaseAPI {

    /**
     */
    async allExamSubmissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExamSubmission>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExamSubmissionFromJSON));
    }

    /**
     */
    async allExamSubmissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExamSubmission>> {
        const response = await this.allExamSubmissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async checkpointExamSubmissionsRaw(requestParameters: CheckpointExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentExamSubmissionDTO>> {
        if (requestParameters.examSubmissionId === null || requestParameters.examSubmissionId === undefined) {
            throw new runtime.RequiredError('examSubmissionId','Required parameter requestParameters.examSubmissionId was null or undefined when calling checkpointExamSubmissions.');
        }

        if (requestParameters.examSubmissionCheckpointCommand === null || requestParameters.examSubmissionCheckpointCommand === undefined) {
            throw new runtime.RequiredError('examSubmissionCheckpointCommand','Required parameter requestParameters.examSubmissionCheckpointCommand was null or undefined when calling checkpointExamSubmissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/submissions/{examSubmissionId}/checkpoint`.replace(`{${"examSubmissionId"}}`, encodeURIComponent(String(requestParameters.examSubmissionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExamSubmissionCheckpointCommandToJSON(requestParameters.examSubmissionCheckpointCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentExamSubmissionDTOFromJSON(jsonValue));
    }

    /**
     */
    async checkpointExamSubmissions(requestParameters: CheckpointExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentExamSubmissionDTO> {
        const response = await this.checkpointExamSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteExamSubmissionsRaw(requestParameters: DeleteExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.examSubmissionId === null || requestParameters.examSubmissionId === undefined) {
            throw new runtime.RequiredError('examSubmissionId','Required parameter requestParameters.examSubmissionId was null or undefined when calling deleteExamSubmissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submissions/{examSubmissionId}`.replace(`{${"examSubmissionId"}}`, encodeURIComponent(String(requestParameters.examSubmissionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteExamSubmissions(requestParameters: DeleteExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExamSubmissionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getExamSubmissionsRaw(requestParameters: GetExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentExamSubmissionDTO>> {
        if (requestParameters.examSubmissionId === null || requestParameters.examSubmissionId === undefined) {
            throw new runtime.RequiredError('examSubmissionId','Required parameter requestParameters.examSubmissionId was null or undefined when calling getExamSubmissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submissions/{examSubmissionId}`.replace(`{${"examSubmissionId"}}`, encodeURIComponent(String(requestParameters.examSubmissionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentExamSubmissionDTOFromJSON(jsonValue));
    }

    /**
     */
    async getExamSubmissions(requestParameters: GetExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentExamSubmissionDTO> {
        const response = await this.getExamSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async myExamSubmissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StudentExamSubmissionDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/submissions/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudentExamSubmissionDTOFromJSON));
    }

    /**
     */
    async myExamSubmissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StudentExamSubmissionDTO>> {
        const response = await this.myExamSubmissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async submitExamSubmissionsRaw(requestParameters: SubmitExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudentExamSubmissionDTO>> {
        if (requestParameters.examSubmissionId === null || requestParameters.examSubmissionId === undefined) {
            throw new runtime.RequiredError('examSubmissionId','Required parameter requestParameters.examSubmissionId was null or undefined when calling submitExamSubmissions.');
        }

        if (requestParameters.examSubmissionSubmitCommand === null || requestParameters.examSubmissionSubmitCommand === undefined) {
            throw new runtime.RequiredError('examSubmissionSubmitCommand','Required parameter requestParameters.examSubmissionSubmitCommand was null or undefined when calling submitExamSubmissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/submissions/{examSubmissionId}/submit`.replace(`{${"examSubmissionId"}}`, encodeURIComponent(String(requestParameters.examSubmissionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExamSubmissionSubmitCommandToJSON(requestParameters.examSubmissionSubmitCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentExamSubmissionDTOFromJSON(jsonValue));
    }

    /**
     */
    async submitExamSubmissions(requestParameters: SubmitExamSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudentExamSubmissionDTO> {
        const response = await this.submitExamSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
